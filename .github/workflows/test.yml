name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  LIBTORCH_USE_PYTORCH: 1

jobs:
  test-matrix:
    name: Test ${{ matrix.os }} / Rust ${{ matrix.rust }} / Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        python: ['3.8', '3.10', '3.12']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            rust: beta
          - os: macos-latest
            python: '3.8'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}

    - name: Install PyTorch (Linux/Windows)
      if: runner.os != 'macOS'
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu

    - name: Install PyTorch (macOS)
      if: runner.os == 'macOS'
      run: |
        python3 -m venv torch_env
        source torch_env/bin/activate
        python3 -m pip install --upgrade pip
        python3 -m pip install torch torchvision
        echo "VIRTUAL_ENV=$PWD/torch_env" >> $GITHUB_ENV
        echo "$PWD/torch_env/bin" >> $GITHUB_PATH

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Run tests
      run: cargo test --all-features --verbose

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-features -- -D warnings

    - name: Check formatting
      if: matrix.rust == 'stable'
      run: cargo fmt -- --check

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install PyTorch
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage
      run: cargo tarpaulin --out Xml --all-features

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./cobertura.xml
        flags: unittests
        name: torch-rs
        fail_ci_if_error: true

    - name: Check coverage threshold
      run: |
        cargo tarpaulin --print-summary --fail-under 85

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install PyTorch
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu

    - name: Run benchmarks
      run: cargo bench --features torch-rs

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: target/criterion/output.txt
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: false